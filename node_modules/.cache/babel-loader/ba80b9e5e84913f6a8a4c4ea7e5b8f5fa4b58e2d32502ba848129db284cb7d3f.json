{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Utilisateur\\\\Desktop\\\\projects\\\\Flagify\\\\src\\\\components\\\\gameController.jsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef, useState } from \"react\";\nimport { fetch } from \"../utils/fetch\";\nimport CountryBtn from \"./countryBtn\";\nimport { useDispatch } from \"react-redux\";\nimport { setCountries } from \"../reducer/countrySlice\";\nimport { questions } from \"../utils/questions\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst getRandomQuestion = () => {\n  const questionID = Math.floor(Math.random() * questions.length);\n  return questions[questionID];\n};\nconst GameController = () => {\n  _s();\n  const [displayedData, setDisplayedData] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const randomCountryRef = useRef([]);\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        const result = await fetch();\n        setDisplayedData(result);\n      } catch (error) {\n        console.error(\"Error fetching data:\", error);\n        setLoading(false);\n      }\n    };\n    fetchData();\n  }, []);\n  useEffect(() => {\n    if (displayedData.length > 0) {\n      const uniqueEntries = new Set();\n      while (uniqueEntries.size < 4) {\n        uniqueEntries.add(getRandomInt(0, displayedData.length));\n      }\n      randomCountryRef.current = Array.from(uniqueEntries).map(index => displayedData[index]);\n      setLoading(false);\n    }\n  }, [displayedData]);\n  const getRandomInt = (min, max) => {\n    min = Math.ceil(min);\n    max = Math.floor(max);\n    return Math.floor(Math.random() * (max - min)) + min;\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"flex flex-col justify-end items-center bg-gradient-to-b from-bgr1 to-bgr2 rounded-tl-xl rounded-tr-xl p-4 md:p-8  absolute bottom-0 shadow-2xl\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"grid grid-cols-2 gap-4 sm:grid-cols-2 lg:grid-cols-2 xl:grid-cols-2\",\n      children: loading ? /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Loading...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 11\n      }, this) : randomCountryRef.current.map((country, index) => /*#__PURE__*/_jsxDEV(CountryBtn, {\n        country: country\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 13\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 51,\n    columnNumber: 5\n  }, this);\n};\n_s(GameController, \"FZBIa2fQ8MksW0bctgoSQkn0bVw=\");\n_c = GameController;\nexport default GameController;\nvar _c;\n$RefreshReg$(_c, \"GameController\");","map":{"version":3,"names":["React","useEffect","useRef","useState","fetch","CountryBtn","useDispatch","setCountries","questions","jsxDEV","_jsxDEV","getRandomQuestion","questionID","Math","floor","random","length","GameController","_s","displayedData","setDisplayedData","loading","setLoading","randomCountryRef","fetchData","result","error","console","uniqueEntries","Set","size","add","getRandomInt","current","Array","from","map","index","min","max","ceil","className","children","fileName","_jsxFileName","lineNumber","columnNumber","country","_c","$RefreshReg$"],"sources":["C:/Users/Utilisateur/Desktop/projects/Flagify/src/components/gameController.jsx"],"sourcesContent":["import React, { useEffect, useRef, useState } from \"react\";\r\nimport { fetch } from \"../utils/fetch\";\r\nimport CountryBtn from \"./countryBtn\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport { setCountries } from \"../reducer/countrySlice\";\r\nimport { questions } from \"../utils/questions\";\r\nconst getRandomQuestion = () => {\r\n  const questionID = Math.floor(Math.random() * questions.length);\r\n  return questions[questionID];\r\n};\r\nconst GameController = () => {\r\n  const [displayedData, setDisplayedData] = useState([]);\r\n  const [loading, setLoading] = useState(true);\r\n  const randomCountryRef = useRef([]);\r\n\r\n  useEffect(() => {\r\n    const fetchData = async () => {\r\n      try {\r\n        const result = await fetch();\r\n        setDisplayedData(result);\r\n      } catch (error) {\r\n        console.error(\"Error fetching data:\", error);\r\n        setLoading(false);\r\n      }\r\n    };\r\n\r\n    fetchData();\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    if (displayedData.length > 0) {\r\n      const uniqueEntries = new Set();\r\n      while (uniqueEntries.size < 4) {\r\n        uniqueEntries.add(getRandomInt(0, displayedData.length));\r\n      }\r\n      randomCountryRef.current = Array.from(uniqueEntries).map(\r\n        (index) => displayedData[index]\r\n      );\r\n\r\n      setLoading(false);\r\n    }\r\n  }, [displayedData]);\r\n\r\n  const getRandomInt = (min, max) => {\r\n    min = Math.ceil(min);\r\n    max = Math.floor(max);\r\n    return Math.floor(Math.random() * (max - min)) + min;\r\n  };\r\n\r\n  return (\r\n    <div className=\"flex flex-col justify-end items-center bg-gradient-to-b from-bgr1 to-bgr2 rounded-tl-xl rounded-tr-xl p-4 md:p-8  absolute bottom-0 shadow-2xl\">\r\n      <div className=\"grid grid-cols-2 gap-4 sm:grid-cols-2 lg:grid-cols-2 xl:grid-cols-2\">\r\n        {loading ? (\r\n          <p>Loading...</p>\r\n        ) : (\r\n          randomCountryRef.current.map((country, index) => (\r\n            <CountryBtn key={index} country={country} />\r\n          ))\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default GameController;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}